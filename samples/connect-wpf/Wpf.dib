#!csharp

#!connect named-pipe --kernel-name wpf --pipe-name InteractiveWpf

//#!connect signalr --kernel-name wpf --hub-url https://someurlhere.org

#!csharp

#!lsmagic

#!csharp

#!wpf
var foo = 0;
foo
#!whos

#!markdown

## Formatter (Rendering)

#!csharp

#!wpf
#!dispatcher
using System.Windows.Media;

//var viewModel = (MainWindowViewModel)App.MainWindow.DataContext;
//viewModel.Text = "Yay Dotnet";
//App.MainWindow.Title = " My Title";
App.MainWindow.Background = new SolidColorBrush(Colors.Fuchsia);

Formatter<SolidColorBrush>.Register((brush, writer) => {
    var color = brush.Color;
    //TODO: Alpha
    string stringValue = $"#{color.R:X2}{color.G:X2}{color.B:X2}";
    
    PocketView d = div(
        div[style:$"border:2px solid #FFFFFF;background-color:{stringValue};width:15px;height:15px"](),
        div(b(stringValue))
    );
    display(d, "text/plain");
    writer.Write(d);
    //Pocket view time!

}, "text/html");

App.MainWindow.Background

#!csharp

#!wpf
#!dispatcher
using System.Windows.Media;
using System.Windows.Controls;
using System.Windows;
using System.Windows.Media.Imaging;
using System.IO;

PocketView GetImage(FrameworkElement visual)
{
    var rect = new Rect(visual.RenderSize);
    var drawingVisual = new DrawingVisual();

    using (var dc = drawingVisual.RenderOpen())
    {
        dc.DrawRectangle(new VisualBrush(visual), null, rect);
    }

    var bitmap = new RenderTargetBitmap(
        (int)rect.Width, (int)rect.Height, 96, 96, PixelFormats.Default);
    bitmap.Render(drawingVisual);

    var encoder = new PngBitmapEncoder();
    encoder.Frames.Add(BitmapFrame.Create(bitmap));

    using var ms = new MemoryStream();
    encoder.Save(ms);
    ms.Flush();
    var data = ms.ToArray();
    var imageSource = $"data:image/png;base64, {Convert.ToBase64String(data)}";
    PocketView png = img[src:imageSource,width:rect.Width,height:rect.Height]();
    return png;
}

Formatter.Register(type: typeof(System.Windows.IFrameworkInputElement), formatter: (visual, writer) => {
    if (visual is FrameworkElement element)
    {
        writer.Write(GetImage(element));
    }
}, "text/html");

var grid = (Grid)App.MainWindow.Content;
grid.Background = new SolidColorBrush(Colors.Blue);
grid

#!csharp

Formatter.ResetToDefault();
Formatter.Register(
            type: typeof(IEnumerable),
            formatter: (obj, writer) =>
            {
                writer.Write($"hi {obj.GetType()}");
            }, "text/html");

var list = new List<int> { 1, 2, 3, 4, 5, 8 };

list

#!markdown

## View Model Stuff

#!csharp

#!wpf
using System.ComponentModel;
    public class TestViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        private string _text = "Init Value";
        public string Text
        {
            get => _text;
            set
            {
                if (_text != value)
                {
                    _text = value;
                    PropertyChanged.Invoke(this, new PropertyChangedEventArgs(nameof(Text)));
                }
            }
        }
    }

var vm = new TestViewModel();
App.MainWindow.DataContext = vm;

#!csharp

#!wpf
vm.Text = "Yay Diego!!!!!"

#!markdown

 ## Dispatcher stuff

#!csharp

#!wpf

#!dispatcher --enabled true
//This should work
App.MainWindow.Title

#!dispatcher --enabled false
//This is expected to fail
App.MainWindow.Title
